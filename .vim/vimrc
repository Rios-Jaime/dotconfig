call pathogen#infect()
call pathogen#helptags()

set nocompatible    " required
filetype on         " required
filetype plugin on  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
Plugin 'dracula/vim', { 'name': 'dracula' }
Plugin 'itspriddle/vim-marked', {'name': 'marked'}
Plugin 'andviro/flake8-vim'
Plugin 'https://github.com/tpope/vim-fugitive'
Plugin 'scrooloose/nerdtree'
Plugin 'bling/vim-airline'
Plugin 'dense-analysis/ale'
Plugin 'ambv/black'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'github/copilot.vim'
Plugin 'jupyter-vim/jupyter-vim'
Plugin 'jpalardy/vim-slime'

" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required

" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" colors
colorscheme dracula

" general settings
set tabstop=2
set softtabstop=2
set shiftwidth=2
set autoindent
set smartindent
set smarttab
set expandtab
set fileformat=unix
set encoding=UTF-8
set cursorline
set number
set relativenumber
set scrolloff=8
set signcolumn=yes
syntax on

au BufNewFile, BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |

let mapleader = ","

" ale settings
let g:ale_lint_on_enter = 0         " Disable linting when opening file
let g:ale_lint_on_save = 1          " Linting on save
let g:ale_sign_error = '●'          " Making errors look nicer
let g:ale_sign_warning = '.'
let g:ale_linters = {'python':['flake8-vim']}
let g:ale_fixers = {'python': ['black']}
let g:ale_fix_on_save = 1
nmap <silent> <C-e> <Plug>(ale_next_wrap)   " Control-e to move to next error

autocmd BufWritePre *.py execute ':black'

function! LinterStatus() abort              " Showing # of errrors / warnings
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
        \   '%d⨉ %d⚠ ',
        \   all_non_errors,
        \   all_errors
        \)
endfunction
set statusline+=%=
set statusline+=\ %{LinterStatus()}

" nerdtree settings
let NERDTreeAutoDeleteBuffer = 1        " Deleting files
let NERDTreeMinimalUI = 1               " make tree look nicer
let NERDTreeDirArrows = 1
let NERDTreeShowHidden=1
let NERDTreeRespectWildIgnore=1
set wildignore+=*.DS_Store,*.min.*
autocmd BufWinEnter * silent NERDTreeMirror

" Start NERDTree, unless a file or session is specified, eg. vim -S session_file.vim.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') && v:this_session == '' | NERDTree | endif

nnoremap <Leader>f :NERDTreeToggle<Enter>    
nnoremap <silent> <Leader>v :NERDTreeFind<CR>

" Close the tab if NERDTree is the only window remaining in it.
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" vim-slime settings.

let g:slime_target = "vimterminal"
let g:slime_vimterminal_config = {"term_finish": "close"}
let g:slime_python_ipython = 1
